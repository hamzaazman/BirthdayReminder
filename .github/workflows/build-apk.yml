name: Build APK

on:
  push:
    branches: [master]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    name: Build & Upload APK
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-

    - name: Decode keystore from base64 and save
      run: echo "${{ secrets.KEYSTORE_FILE_PATH }}" | base64 --decode > keystore.jks

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Grant execute permission to gradlew
      run: chmod +x ./gradlew

    - name: Build release APK
      run: ./gradlew assembleRelease --stacktrace

    
    - name: Get App Version from Gradle
      id: get_version
      run: |
        # build.gradle'dan versionName ve versionCode'u oku (örneğin)
        # Bu, APK'nızın gerçek versiyonuyla eşleşmesini sağlar
        VERSION_NAME=$(grep "versionName" app/build.gradle | awk -F "'" '{print $2}')
        VERSION_CODE=$(grep "versionCode" app/build.gradle | awk '{print $2}')
        echo "APP_VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
        echo "APP_VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
        echo "RELEASE_TAG=v${VERSION_NAME}-$(date +'%Y.%m.%d-%H%M%S')" >> $GITHUB_ENV # Daha detaylı bir etiket
        
        # Eğer build.gradle'da versionCode dinamik ise, buraya uygun bir şekilde okuyun.
        # Örneğin: versionCode 1
        # VEYA, her build'de benzersiz bir versionCode oluşturmak için:
        # echo "APP_VERSION_CODE=$(date +%s)" >> $GITHUB_ENV # Unix timestamp olarak

    - name: Find APK path dynamically
      id: find_apk
      run: |
        # Bu adımı APK'yı dinamik bulmak için kullanmaya devam edebiliriz.
        # Ancak, daha sonra daha iyi bir isimlendirme ve taşıma yapacağız.
        # find app/build/outputs -name "*.apk" | head -n 1
        # Yukarıdaki satırı silebiliriz, çünkü bir sonraki adımda doğrudan doğru APK'yı alacağız.

    - name: Rename and move APK for consistent naming
      run: |
        # app-release.apk'yi gerçek versiyon ve etiketle yeniden adlandır
        # 'app/build/outputs/apk/release' yolu Gradle sürümüne veya varyantına göre değişebilir
        APK_INPUT_PATH=$(find app/build/outputs -name "app-release.apk" -print -quit)
        if [ -z "$APK_INPUT_PATH" ]; then
          echo "Error: app-release.apk not found!"
          exit 1
        fi
        NEW_APK_NAME="BirthdayReminder-${{ env.RELEASE_TAG }}.apk"
        cp "$APK_INPUT_PATH" "./$NEW_APK_NAME"
        echo "NEW_APK_NAME=$NEW_APK_NAME" >> $GITHUB_ENV # update.json için kullanmak üzere ayarla

    - name: Create update.json
      run: |
        echo '{
          "versionCode": '"${{ env.APP_VERSION_CODE }}"',
          "versionName": "'"${{ env.APP_VERSION_NAME }}"'",
          "apkUrl": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/releases/${{ env.NEW_APK_NAME }}",
          "changelog": "Otomatik yayın - ${{ env.RELEASE_TAG }}"
        }' > update.json

    - name: Upload update.json and APK to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./ 
        destination_dir: releases 

    - name: Create GitHub Release and upload APK
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: ${{ env.RELEASE_TAG }}
        body: "Otomatik yayın"
        files: ${{ env.NEW_APK_NAME }} 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    env:
      KEYSTORE_FILE_PATH: ${{ secrets.KEYSTORE_FILE_PATH }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
