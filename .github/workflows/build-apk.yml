name: Build APK

on:
  push:
    branches: [master]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    name: Build & Upload APK
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-

    - name: Decode keystore from base64 and save
      run: echo "${{ secrets.KEYSTORE_FILE_PATH }}" | base64 --decode > keystore.jks

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Grant execute permission to gradlew
      run: chmod +x ./gradlew

    - name: Get App Version and Generate Tags
      id: version_info
      run: |
        # APP_VERSION_CODE için Unix timestamp kullanıyoruz, bu her zaman benzersiz ve artan olacaktır.
        APP_VERSION_CODE=$(date +%s) # Unix timestamp (saniye cinsinden) olarak benzersiz versionCode

        # APP_VERSION_NAME için Git tag'ını kullanmayı deneyelim.
        # Eğer tag yoksa veya 'v' önekiyle birlikte commit hash'i dönerse,
        # daha okunabilir bir varsayılan değer (örn. '1.0.0') kullanalım.
        RAW_APP_VERSION_NAME=$(git describe --tags --abbrev=0 --always)
        APP_VERSION_NAME="${RAW_APP_VERSION_NAME#v}" # "v" önekini kaldırır

        # Eğer APP_VERSION_NAME hala bir commit hash'i gibi görünüyorsa veya boşsa,
        # fallback olarak run_number'ı kullanan bir versiyon adı oluşturalım.
        # Commit hash'i genellikle en az 7 karakter uzunluğundadır, bu bir kontrol olabilir.
        if [[ -z "$APP_VERSION_NAME" || ${#APP_VERSION_NAME} -gt 6 && "$APP_VERSION_NAME" =~ ^[0-9a-fA-F]+$ ]]; then
          APP_VERSION_NAME="0.0.${{ github.run_number }}" # Örneğin: 0.0.1, 0.0.2 vb.
        fi

        # RELEASE_TAG, GitHub Release ve APK dosya adı için kullanılacak.
        # Formatı 'v<versionName>-<timestamp>' olarak belirleyelim, bu genellikle kabul görür.
        RELEASE_TAG="v${APP_VERSION_NAME}-${APP_VERSION_CODE}" 
        NEW_APK_NAME="BirthdayReminder-${{ env.RELEASE_TAG }}.apk"

        # Bu değerleri sonraki adımlarda kullanmak üzere ortam değişkenlerine yaz
        echo "APP_VERSION_NAME=$APP_VERSION_NAME" >> $GITHUB_ENV
        echo "APP_VERSION_CODE=$APP_VERSION_CODE" >> $GITHUB_ENV
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
        echo "NEW_APK_NAME=$NEW_APK_NAME" >> $GITHUB_ENV

        # Hata ayıklama çıktıları
        echo "DEBUG: APP_VERSION_NAME: $APP_VERSION_NAME"
        echo "DEBUG: APP_VERSION_CODE: $APP_VERSION_CODE"
        echo "DEBUG: RELEASE_TAG: $RELEASE_TAG"
        echo "DEBUG: NEW_APK_NAME: $NEW_APK_NAME"

    # --- Build release APK (Parametrelerle) ---
    - name: Build release APK
      # Gradle'a -P ile appVersionCode ve appVersionName property'lerini geçir
      run: ./gradlew assembleRelease -PappVersionCode=${{ env.APP_VERSION_CODE }} -PappVersionName="${{ env.APP_VERSION_NAME }}" --stacktrace

    # --- APK'yı Bul ve Yeniden Adlandır ---
    - name: Find and Rename APK
      run: |
        APK_INPUT_PATH=$(find app/build/outputs -name "app-release.apk" -print -quit)
        if [ -z "$APK_INPUT_PATH" ]; then
          echo "Error: app-release.apk not found in app/build/outputs!"
          exit 1
        fi
        cp "$APK_INPUT_PATH" "./${{ env.NEW_APK_NAME }}"
        echo "Copied $APK_INPUT_PATH to ./${{ env.NEW_APK_NAME }}"

    # --- update.json Dosyasını Oluştur ---
    - name: Create update.json
      run: |
        echo '{
          "versionCode": ${{ env.APP_VERSION_CODE }},
          "versionName": "${{ env.APP_VERSION_NAME }}",
          "apkUrl": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/releases/${{ env.NEW_APK_NAME }}",
          "changelog": "Otomatik yayın - ${{ env.RELEASE_TAG }}"
        }' > update.json
        echo "Generated update.json:"
        cat update.json # Oluşturulan JSON'u loglara yazdır

    # --- update.json ve APK'yı GitHub Pages'a Yükle ---
    - name: Upload update.json and APK to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        destination_dir: releases

    # --- GitHub Sürümü Oluştur ve APK'yı Yükle ---
    - name: Create GitHub Release and upload APK
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: ${{ env.RELEASE_TAG }}
        body: "Otomatik yayın"
        files: ${{ env.NEW_APK_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # --- Ortam Değişkenleri (Tüm İş İçin) ---
    env:
      KEYSTORE_FILE_PATH: ${{ secrets.KEYSTORE_FILE_PATH }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
